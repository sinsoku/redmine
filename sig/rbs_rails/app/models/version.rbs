class Version < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Version, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def project_id: () -> Integer

    def project_id=: (Integer) -> Integer

    def project_id?: () -> bool

    def project_id_changed?: () -> bool

    def project_id_change: () -> [ Integer?, Integer? ]

    def project_id_will_change!: () -> void

    def project_id_was: () -> Integer?

    def project_id_previously_changed?: () -> bool

    def project_id_previous_change: () -> Array[Integer?]?

    def project_id_previously_was: () -> Integer?

    def project_id_before_last_save: () -> Integer?

    def project_id_change_to_be_saved: () -> Array[Integer?]?

    def project_id_in_database: () -> Integer?

    def saved_change_to_project_id: () -> Array[Integer?]?

    def saved_change_to_project_id?: () -> bool

    def will_save_change_to_project_id?: () -> bool

    def restore_project_id!: () -> void

    def clear_project_id_change: () -> void

    def name: () -> String?

    def name=: (String?) -> String?

    def name?: () -> bool

    def name_changed?: () -> bool

    def name_change: () -> [ String?, String? ]

    def name_will_change!: () -> void

    def name_was: () -> String?

    def name_previously_changed?: () -> bool

    def name_previous_change: () -> Array[String?]?

    def name_previously_was: () -> String?

    def name_before_last_save: () -> String?

    def name_change_to_be_saved: () -> Array[String?]?

    def name_in_database: () -> String?

    def saved_change_to_name: () -> Array[String?]?

    def saved_change_to_name?: () -> bool

    def will_save_change_to_name?: () -> bool

    def restore_name!: () -> void

    def clear_name_change: () -> void

    def description: () -> String?

    def description=: (String?) -> String?

    def description?: () -> bool

    def description_changed?: () -> bool

    def description_change: () -> [ String?, String? ]

    def description_will_change!: () -> void

    def description_was: () -> String?

    def description_previously_changed?: () -> bool

    def description_previous_change: () -> Array[String?]?

    def description_previously_was: () -> String?

    def description_before_last_save: () -> String?

    def description_change_to_be_saved: () -> Array[String?]?

    def description_in_database: () -> String?

    def saved_change_to_description: () -> Array[String?]?

    def saved_change_to_description?: () -> bool

    def will_save_change_to_description?: () -> bool

    def restore_description!: () -> void

    def clear_description_change: () -> void

    def effective_date: () -> Date?

    def effective_date=: (Date?) -> Date?

    def effective_date?: () -> bool

    def effective_date_changed?: () -> bool

    def effective_date_change: () -> [ Date?, Date? ]

    def effective_date_will_change!: () -> void

    def effective_date_was: () -> Date?

    def effective_date_previously_changed?: () -> bool

    def effective_date_previous_change: () -> Array[Date?]?

    def effective_date_previously_was: () -> Date?

    def effective_date_before_last_save: () -> Date?

    def effective_date_change_to_be_saved: () -> Array[Date?]?

    def effective_date_in_database: () -> Date?

    def saved_change_to_effective_date: () -> Array[Date?]?

    def saved_change_to_effective_date?: () -> bool

    def will_save_change_to_effective_date?: () -> bool

    def restore_effective_date!: () -> void

    def clear_effective_date_change: () -> void

    def created_on: () -> ActiveSupport::TimeWithZone?

    def created_on=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

    def created_on?: () -> bool

    def created_on_changed?: () -> bool

    def created_on_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_on_will_change!: () -> void

    def created_on_was: () -> ActiveSupport::TimeWithZone?

    def created_on_previously_changed?: () -> bool

    def created_on_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_on_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_on_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_on_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_on_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_on: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_on?: () -> bool

    def will_save_change_to_created_on?: () -> bool

    def restore_created_on!: () -> void

    def clear_created_on_change: () -> void

    def updated_on: () -> ActiveSupport::TimeWithZone?

    def updated_on=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

    def updated_on?: () -> bool

    def updated_on_changed?: () -> bool

    def updated_on_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_on_will_change!: () -> void

    def updated_on_was: () -> ActiveSupport::TimeWithZone?

    def updated_on_previously_changed?: () -> bool

    def updated_on_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_on_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_on_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_on_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_on_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_on: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_on?: () -> bool

    def will_save_change_to_updated_on?: () -> bool

    def restore_updated_on!: () -> void

    def clear_updated_on_change: () -> void

    def wiki_page_title: () -> String?

    def wiki_page_title=: (String?) -> String?

    def wiki_page_title?: () -> bool

    def wiki_page_title_changed?: () -> bool

    def wiki_page_title_change: () -> [ String?, String? ]

    def wiki_page_title_will_change!: () -> void

    def wiki_page_title_was: () -> String?

    def wiki_page_title_previously_changed?: () -> bool

    def wiki_page_title_previous_change: () -> Array[String?]?

    def wiki_page_title_previously_was: () -> String?

    def wiki_page_title_before_last_save: () -> String?

    def wiki_page_title_change_to_be_saved: () -> Array[String?]?

    def wiki_page_title_in_database: () -> String?

    def saved_change_to_wiki_page_title: () -> Array[String?]?

    def saved_change_to_wiki_page_title?: () -> bool

    def will_save_change_to_wiki_page_title?: () -> bool

    def restore_wiki_page_title!: () -> void

    def clear_wiki_page_title_change: () -> void

    def status: () -> String?

    def status=: (String?) -> String?

    def status?: () -> bool

    def status_changed?: () -> bool

    def status_change: () -> [ String?, String? ]

    def status_will_change!: () -> void

    def status_was: () -> String?

    def status_previously_changed?: () -> bool

    def status_previous_change: () -> Array[String?]?

    def status_previously_was: () -> String?

    def status_before_last_save: () -> String?

    def status_change_to_be_saved: () -> Array[String?]?

    def status_in_database: () -> String?

    def saved_change_to_status: () -> Array[String?]?

    def saved_change_to_status?: () -> bool

    def will_save_change_to_status?: () -> bool

    def restore_status!: () -> void

    def clear_status_change: () -> void

    def sharing: () -> String

    def sharing=: (String) -> String

    def sharing?: () -> bool

    def sharing_changed?: () -> bool

    def sharing_change: () -> [ String?, String? ]

    def sharing_will_change!: () -> void

    def sharing_was: () -> String?

    def sharing_previously_changed?: () -> bool

    def sharing_previous_change: () -> Array[String?]?

    def sharing_previously_was: () -> String?

    def sharing_before_last_save: () -> String?

    def sharing_change_to_be_saved: () -> Array[String?]?

    def sharing_in_database: () -> String?

    def saved_change_to_sharing: () -> Array[String?]?

    def saved_change_to_sharing?: () -> bool

    def will_save_change_to_sharing?: () -> bool

    def restore_sharing!: () -> void

    def clear_sharing_change: () -> void
  end
  include GeneratedAttributeMethods
  def fixed_issues: () -> Issue::ActiveRecord_Associations_CollectionProxy
  def fixed_issues=: (Issue::ActiveRecord_Associations_CollectionProxy | Array[Issue]) -> (Issue::ActiveRecord_Associations_CollectionProxy | Array[Issue])
  def fixed_issue_ids: () -> Array[Integer]
  def fixed_issue_ids=: (Array[Integer]) -> Array[Integer]
  def custom_values: () -> CustomValue::ActiveRecord_Associations_CollectionProxy
  def custom_values=: (CustomValue::ActiveRecord_Associations_CollectionProxy | Array[CustomValue]) -> (CustomValue::ActiveRecord_Associations_CollectionProxy | Array[CustomValue])
  def custom_value_ids: () -> Array[Integer]
  def custom_value_ids=: (Array[Integer]) -> Array[Integer]
  def attachments: () -> Attachment::ActiveRecord_Associations_CollectionProxy
  def attachments=: (Attachment::ActiveRecord_Associations_CollectionProxy | Array[Attachment]) -> (Attachment::ActiveRecord_Associations_CollectionProxy | Array[Attachment])
  def attachment_ids: () -> Array[Integer]
  def attachment_ids=: (Array[Integer]) -> Array[Integer]

  def project: () -> Project
  def project=: (Project?) -> Project?
  def reload_project: () -> Project?
  def build_project: (untyped) -> Project
  def create_project: (untyped) -> Project
  def create_project!: (untyped) -> Project

  def self.named: (untyped arg) -> ActiveRecord_Relation
  def self.open: () -> ActiveRecord_Relation
  def self.sorted: () -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def named: (untyped arg) -> ActiveRecord_Relation

    def open: () -> ActiveRecord_Relation

    def sorted: () -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Version, Integer]
    include Enumerable[Version]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Version, Integer]
  end
end
