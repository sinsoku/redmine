# Generated from app/helpers/sort_helper.rb with RBS::Inline

module SortHelper
  def sort_name: () -> untyped

  # Initializes the default sort.
  # Examples:
  #
  #   sort_init 'name'
  #   sort_init 'id', 'desc'
  #   sort_init ['name', ['id', 'desc']]
  #   sort_init [['name', 'desc'], ['id', 'desc']]
  def sort_init: (*untyped args) -> untyped

  # Updates the sort state. Call this in the controller prior to calling
  # sort_clause.
  # - criteria can be either an array or a hash of allowed keys
  def sort_update: (untyped criteria, ?untyped sort_name) -> untyped

  # Clears the sort criteria session data
  def sort_clear: () -> untyped

  # Returns an SQL sort clause corresponding to the current sort state.
  # Use this to sort the controller's table items collection.
  def sort_clause: () -> untyped

  def sort_criteria: () -> untyped

  # Returns a link which sorts by the named column.
  #
  # - column is the name of an attribute in the sorted record collection.
  # - the optional caption explicitly specifies the displayed link text.
  # - 2 CSS classes reflect the state of the link: sort and asc or desc
  def sort_link: (untyped column, untyped caption, untyped default_order) -> untyped

  # Returns a table header <th> tag with a sort link for the named column
  # attribute.
  #
  # Options:
  #   :caption     The displayed link name (defaults to titleized column name).
  #   :title       The tag's 'title' attribute (defaults to 'Sort by :caption').
  #
  # Other options hash entries generate additional table header tag attributes.
  #
  # Example:
  #
  #   <%= sort_header_tag('id', :title => 'Sort by contact ID', :width => 40) %>
  def sort_header_tag: (untyped column, ?untyped options) -> untyped

  # Returns the css classes for the current sort order
  #
  # Example:
  #
  #   sort_css_classes
  #   # => "sort-by-created-on sort-desc"
  def sort_css_classes: () -> untyped
end
