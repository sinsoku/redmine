# Generated from app/models/mailer.rb with RBS::Inline

class Mailer < ActionMailer::Base
  include Redmine::I18n

  include Roadie::Rails::Automatic

  class DeliveryJob < ActionMailer::MailDeliveryJob
    include Redmine::JobWrapper
  end

  # Overrides ActionMailer::Base#process in order to set the recipient as the current user
  # and his language as the default locale.
  # The first argument of all actions of this Mailer must be a User (the recipient),
  # otherwise an ArgumentError is raised.
  def process: (untyped action, *untyped args) -> untyped

  # Default URL options for generating URLs in emails based on host_name and protocol
  # defined in application settings.
  def self.default_url_options: () -> untyped

  # Builds a mail for notifying user about a new issue
  def issue_add: (untyped user, untyped issue) -> untyped

  # Notifies users about a new issue.
  #
  # Example:
  #   Mailer.deliver_issue_add(issue)
  def self.deliver_issue_add: (untyped issue) -> untyped

  # Builds a mail for notifying user about an issue update
  def issue_edit: (untyped user, untyped journal) -> untyped

  # Notifies users about an issue update.
  #
  # Example:
  #   Mailer.deliver_issue_edit(journal)
  def self.deliver_issue_edit: (untyped journal) -> untyped

  # Builds a mail to user about a new document.
  def document_added: (untyped user, untyped document, untyped author) -> untyped

  # Notifies users that document was created by author
  #
  # Example:
  #   Mailer.deliver_document_added(document, author)
  def self.deliver_document_added: (untyped document, untyped author) -> untyped

  # Builds a mail to user about new attachements.
  def attachments_added: (untyped user, untyped attachments) -> untyped

  # Notifies users about new attachments
  #
  # Example:
  #   Mailer.deliver_attachments_added(attachments)
  def self.deliver_attachments_added: (untyped attachments) -> untyped

  # Builds a mail to user about a new news.
  def news_added: (untyped user, untyped news) -> untyped

  # Notifies users about new news
  #
  # Example:
  #   Mailer.deliver_news_added(news)
  def self.deliver_news_added: (untyped news) -> untyped

  # Builds a mail to user about a new news comment.
  def news_comment_added: (untyped user, untyped comment) -> untyped

  # Notifies users about a new comment on a news
  #
  # Example:
  #   Mailer.deliver_news_comment_added(comment)
  def self.deliver_news_comment_added: (untyped comment) -> untyped

  # Builds a mail to user about a new message.
  def message_posted: (untyped user, untyped message) -> untyped

  # Notifies users about a new forum message.
  #
  # Example:
  #   Mailer.deliver_message_posted(message)
  def self.deliver_message_posted: (untyped message) -> untyped

  # Builds a mail to user about a new wiki content.
  def wiki_content_added: (untyped user, untyped wiki_content) -> untyped

  # Notifies users about a new wiki content (wiki page added).
  #
  # Example:
  #   Mailer.deliver_wiki_content_added(wiki_content)
  def self.deliver_wiki_content_added: (untyped wiki_content) -> untyped

  # Builds a mail to user about an update of the specified wiki content.
  def wiki_content_updated: (untyped user, untyped wiki_content) -> untyped

  # Notifies users about the update of the specified wiki content
  #
  # Example:
  #   Mailer.deliver_wiki_content_updated(wiki_content)
  def self.deliver_wiki_content_updated: (untyped wiki_content) -> untyped

  # Builds a mail to user about his account information.
  def account_information: (untyped user, untyped password) -> untyped

  # Notifies user about his account information.
  def self.deliver_account_information: (untyped user, untyped password) -> untyped

  # Builds a mail to user about an account activation request.
  def account_activation_request: (untyped user, untyped new_user) -> untyped

  # Notifies admin users that an account activation request needs
  # their approval.
  #
  # Exemple:
  #   Mailer.deliver_account_activation_request(new_user)
  def self.deliver_account_activation_request: (untyped new_user) -> untyped

  # Builds a mail to notify user that his account was activated.
  def account_activated: (untyped user) -> untyped

  # Notifies user that his account was activated.
  #
  # Exemple:
  #   Mailer.deliver_account_activated(user)
  def self.deliver_account_activated: (untyped user) -> untyped

  # Builds a mail with the password recovery link.
  def lost_password: (untyped user, untyped token, ?untyped recipient) -> untyped

  # Sends an email to user with a password recovery link.
  # The email will be sent to the email address specifiedby recipient if provided.
  #
  # Exemple:
  #   Mailer.deliver_lost_password(user, token)
  #   Mailer.deliver_lost_password(user, token, 'foo@example.net')
  def self.deliver_lost_password: (untyped user, untyped token, ?untyped recipient) -> untyped

  # Notifies user that his password was updated by sender.
  #
  # Exemple:
  #   Mailer.deliver_password_updated(user, sender)
  def self.deliver_password_updated: (untyped user, untyped sender) -> untyped

  # Builds a mail to user with his account activation link.
  def register: (untyped user, untyped token) -> untyped

  # Sends an mail to user with his account activation link.
  #
  # Exemple:
  #   Mailer.deliver_register(user, token)
  def self.deliver_register: (untyped user, untyped token) -> untyped

  # Build a mail to user and the additional recipients given in
  # options[:recipients] about a security related event made by sender.
  #
  # Example:
  #   security_notification(user,
  #     sender,
  #     message: :mail_body_security_notification_add,
  #     field: :field_mail,
  #     value: address
  #   ) => Mail::Message object
  def security_notification: (untyped user, untyped sender, ?untyped options) -> untyped

  # Notifies the given users about a security related event made by sender.
  #
  # You can specify additional recipients in options[:recipients]. These will be
  # added to all generated mails for all given users. Usually, you'll want to
  # give only a single user when setting the additional recipients.
  #
  # Example:
  #   Mailer.deliver_security_notification(users,
  #     sender,
  #     message: :mail_body_security_notification_add,
  #     field: :field_mail,
  #     value: address
  #   )
  def self.deliver_security_notification: (untyped users, untyped sender, ?untyped options) -> untyped

  # Build a mail to user about application settings changes made by sender.
  def settings_updated: (untyped user, untyped sender, untyped changes, ?untyped options) -> untyped

  # Notifies admins about application settings changes made by sender, where
  # changes is an array of settings names.
  #
  # Exemple:
  #   Mailer.deliver_settings_updated(sender, [:login_required, :self_registration])
  def self.deliver_settings_updated: (untyped sender, untyped changes, ?untyped options) -> untyped

  # Build a test email to user.
  def test_email: (untyped user) -> untyped

  # Send a test email to user. Will raise error that may occur during delivery.
  #
  # Exemple:
  #   Mailer.deliver_test_email(user)
  def self.deliver_test_email: (untyped user) -> untyped

  # Builds a reminder mail to user about issues that are due in the next days.
  def reminder: (untyped user, untyped issues, untyped days) -> untyped

  # Sends reminders to issue assignees
  # Available options:
  # * :days     => how many days in the future to remind about (defaults to 7)
  # * :tracker  => id of tracker for filtering issues (defaults to all trackers)
  # * :project  => id or identifier of project to process (defaults to all projects)
  # * :users    => array of user/group ids who should be reminded
  # * :version  => name of target version for filtering issues (defaults to none)
  def self.reminders: (?untyped options) -> untyped

  # Activates/desactivates email deliveries during +block+
  def self.with_deliveries: (?untyped enabled) ?{ (?) -> untyped } -> untyped

  # Execute the given block with inline sending of emails if the default Async
  # queue is used for the mailer. See the Rails guide:
  # Using the asynchronous queue from a Rake task will generally not work because
  # Rake will likely end, causing the in-process thread pool to be deleted, before
  # any/all of the .deliver_later emails are processed
  def self.with_synched_deliveries: () ?{ (?) -> untyped } -> untyped

  def mail: (?untyped headers) ?{ (?) -> untyped } -> untyped

  def self.deliver_mail: (untyped mail) -> untyped

  # Returns an array of email addresses to notify by
  # replacing users in arg with their notified email addresses
  #
  # Example:
  #   Mailer.email_addresses(users)
  #   => ["foo@example.net", "bar@example.net"]
  def self.email_addresses: (untyped arg) -> untyped

  private

  # Appends a Redmine header field (name is prepended with 'X-Redmine-')
  def redmine_headers: (untyped h) -> untyped

  def assignee_for_header: (untyped issue) -> untyped

  def self.token_for: (untyped object, untyped user) -> untyped

  # Returns a Message-Id for the given object
  def self.message_id_for: (untyped object, untyped user) -> untyped

  # Returns a uniq token for a given object referenced by all notifications
  # related to this object
  def self.references_for: (untyped object, untyped user) -> untyped

  def message_id: (untyped object) -> untyped

  def references: (untyped object) -> untyped
end
