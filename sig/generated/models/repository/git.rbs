# Generated from app/models/repository/git.rb with RBS::Inline

class Repository::Git < Repository
  def self.human_attribute_name: (untyped attribute_key_name, *untyped args) -> untyped

  def self.scm_adapter_class: () -> untyped

  def self.scm_name: () -> untyped

  def report_last_commit: () -> untyped

  def report_last_commit=: (untyped arg) -> untyped

  def supports_directory_revisions?: () -> untyped

  def supports_revision_graph?: () -> untyped

  def repo_log_encoding: () -> untyped

  # Returns the identifier for the given git changeset
  def self.changeset_identifier: (untyped changeset) -> untyped

  # Returns the readable identifier for the given git changeset
  def self.format_changeset_identifier: (untyped changeset) -> untyped

  def branches: () -> untyped

  def tags: () -> untyped

  def default_branch: () -> untyped

  def find_changeset_by_name: (untyped name) -> untyped

  def scm_entries: (?untyped path, ?untyped identifier) -> untyped

  # With SCMs that have a sequential commit numbering,
  # such as Subversion and Mercurial,
  # Redmine is able to be clever and only fetch changesets
  # going forward from the most recent one it knows about.
  #
  # However, Git does not have a sequential commit numbering.
  #
  # In order to fetch only new adding revisions,
  # Redmine needs to save "heads".
  #
  # In Git and Mercurial, revisions are not in date order.
  # Redmine Mercurial fixed issues.
  #    * Redmine Takes Too Long On Large Mercurial Repository
  #      http://www.redmine.org/issues/3449
  #    * Sorting for changesets might go wrong on Mercurial repos
  #      http://www.redmine.org/issues/3567
  #
  # Database revision column is text, so Redmine can not sort by revision.
  # Mercurial has revision number, and revision number guarantees revision order.
  # Redmine Mercurial model stored revisions ordered by database id to database.
  # So, Redmine Mercurial model can use correct ordering revisions.
  #
  # Redmine Mercurial adapter uses "hg log -r 0:tip --limit 10"
  # to get limited revisions from old to new.
  # But, Git 1.7.3.4 does not support --reverse with -n or --skip.
  #
  # The repository can still be fully reloaded by calling #clear_changesets
  # before fetching changesets (eg. for offline resync)
  def fetch_changesets: () -> untyped

  def save_revisions: (untyped prev_db_heads, untyped repo_heads) -> untyped

  def save_revision: (untyped rev) -> untyped

  def heads_from_branches_hash: () -> untyped

  def latest_changesets: (untyped path, untyped rev, ?untyped limit) -> untyped

  def clear_extra_info_of_changesets: () -> untyped

  def clear_changesets: () -> untyped
end
