# Generated from lib/redmine/plugin.rb with RBS::Inline

module Redmine
  # Exception raised when a plugin cannot be found given its id.
  class PluginNotFound < StandardError
  end

  # Exception raised when a plugin requirement is not met.
  class PluginRequirementError < StandardError
  end

  # Base class for Redmine plugins.
  # Plugins are registered using the <tt>register</tt> class method that acts as the public constructor.
  #
  #   Redmine::Plugin.register :example do
  #     name 'Example plugin'
  #     author 'John Smith'
  #     description 'This is an example plugin for Redmine'
  #     version '0.0.1'
  #     settings :default => {'foo'=>'bar'}, :partial => 'settings/settings'
  #   end
  #
  # === Plugin attributes
  #
  # +settings+ is an optional attribute that let the plugin be configurable.
  # It must be a hash with the following keys:
  # * <tt>:default</tt>: default value for the plugin settings
  # * <tt>:partial</tt>: path of the configuration partial view, relative to the plugin <tt>app/views</tt> directory
  # Example:
  #   settings :default => {'foo'=>'bar'}, :partial => 'settings/settings'
  # In this example, the settings partial will be found here in the plugin directory: <tt>app/views/settings/_settings.rhtml</tt>.
  #
  # When rendered, the plugin settings value is available as the local variable +settings+
  #
  # See: http://www.redmine.org/projects/redmine/wiki/Plugin_Tutorial
  class Plugin
    attr_accessor path: untyped

    attr_reader registered_plugins: untyped

    def self.def_field: (*untyped names) -> untyped

    attr_reader id: untyped

    # Plugin constructor: instanciates a new Redmine::Plugin with given +id+
    # and make it evaluate the given +block+
    #
    # Example
    #   Redmine::Plugin.register :example do
    #     name 'Example plugin'
    #     author 'John Smith'
    #     description 'This is an example plugin for Redmine'
    #     version '0.0.1'
    #     requires_redmine version_or_higher: '3.0.0'
    #   end
    def self.register: (untyped id) ?{ (?) -> untyped } -> untyped

    # Returns an array of all registered plugins
    def self.all: () -> untyped

    # Finds a plugin by its id
    # Returns a PluginNotFound exception if the plugin doesn't exist
    def self.find: (untyped id) -> untyped

    # Clears the registered plugins hash
    # It doesn't unload installed plugins
    def self.clear: () -> untyped

    # Removes a plugin from the registered plugins
    # It doesn't unload the plugin
    def self.unregister: (untyped id) -> untyped

    # Checks if a plugin is installed
    #
    # @param [String] id name of the plugin
    def self.installed?: (untyped id) -> untyped

    def initialize: (untyped id) -> untyped

    def public_directory: () -> untyped

    def to_param: () -> untyped

    # Returns the absolute path to the plugin assets directory
    def assets_directory: () -> untyped

    def asset_prefix: () -> untyped

    def asset_paths: () -> untyped

    def <=>: (untyped plugin) -> untyped

    # Sets a requirement on Redmine version
    # Raises a PluginRequirementError exception if the requirement is not met
    #
    # Examples
    #   # Requires Redmine 0.7.3 or higher
    #   requires_redmine :version_or_higher => '0.7.3'
    #   requires_redmine '0.7.3'
    #
    #   # Requires Redmine 0.7.x or higher
    #   requires_redmine '0.7'
    #
    #   # Requires a specific Redmine version
    #   requires_redmine :version => '0.7.3'              # 0.7.3 only
    #   requires_redmine :version => '0.7'                # 0.7.x
    #   requires_redmine :version => ['0.7.3', '0.8.0']   # 0.7.3 or 0.8.0
    #
    #   # Requires a Redmine version within a range
    #   requires_redmine :version => '0.7.3'..'0.9.1'     # >= 0.7.3 and <= 0.9.1
    #   requires_redmine :version => '0.7'..'0.9'         # >= 0.7.x and <= 0.9.x
    def requires_redmine: (untyped arg) -> untyped

    def compare_versions: (untyped requirement, untyped current) -> untyped

    # Sets a requirement on a Redmine plugin version
    # Raises a PluginRequirementError exception if the requirement is not met
    #
    # Examples
    #   # Requires a plugin named :foo version 0.7.3 or higher
    #   requires_redmine_plugin :foo, :version_or_higher => '0.7.3'
    #   requires_redmine_plugin :foo, '0.7.3'
    #
    #   # Requires a specific version of a Redmine plugin
    #   requires_redmine_plugin :foo, :version => '0.7.3'              # 0.7.3 only
    #   requires_redmine_plugin :foo, :version => ['0.7.3', '0.8.0']   # 0.7.3 or 0.8.0
    def requires_redmine_plugin: (untyped plugin_name, untyped arg) -> untyped

    # Adds an item to the given +menu+.
    # The +id+ parameter (equals to the project id) is automatically added to the url.
    #   menu :project_menu, :plugin_example, { :controller => 'example', :action => 'say_hello' }, :caption => 'Sample'
    #
    # +name+ parameter can be: :top_menu, :account_menu, :application_menu or :project_menu
    def menu: (untyped menu, untyped item, untyped url, ?untyped options) -> untyped

    alias add_menu_item menu

    # Removes +item+ from the given +menu+.
    def delete_menu_item: (untyped menu, untyped item) -> untyped

    # Defines a permission called +name+ for the given +actions+.
    #
    # The +actions+ argument is a hash with controllers as keys and actions as values (a single value or an array):
    #   permission :destroy_contacts, { :contacts => :destroy }
    #   permission :view_contacts, { :contacts => [:index, :show] }
    #
    # The +options+ argument is a hash that accept the following keys:
    # * :public => the permission is public if set to true (implicitly given to any user)
    # * :require => can be set to one of the following values to restrict users the permission can be given to: :loggedin, :member
    # * :read => set it to true so that the permission is still granted on closed projects
    #
    # Examples
    #   # A permission that is implicitly given to any user
    #   # This permission won't appear on the Roles & Permissions setup screen
    #   permission :say_hello, { :example => :say_hello }, :public => true, :read => true
    #
    #   # A permission that can be given to any user
    #   permission :say_hello, { :example => :say_hello }
    #
    #   # A permission that can be given to registered users only
    #   permission :say_hello, { :example => :say_hello }, :require => :loggedin
    #
    #   # A permission that can be given to project members only
    #   permission :say_hello, { :example => :say_hello }, :require => :member
    def permission: (untyped name, untyped actions, ?untyped options) -> untyped

    # Defines a project module, that can be enabled/disabled for each project.
    # Permissions defined inside +block+ will be bind to the module.
    #
    #   project_module :things do
    #     permission :view_contacts, { :contacts => [:list, :show] }, :public => true
    #     permission :destroy_contacts, { :contacts => :destroy }
    #   end
    def project_module: (untyped name) ?{ (?) -> untyped } -> untyped

    # Registers an activity provider.
    #
    # Options:
    # * <tt>:class_name</tt> - one or more model(s) that provide these events (inferred from event_type by default)
    # * <tt>:default</tt> - setting this option to false will make the events not displayed by default
    #
    # A model can provide several activity event types.
    #
    # Examples:
    #   register :news
    #   register :scrums, :class_name => 'Meeting'
    #   register :issues, :class_name => ['Issue', 'Journal']
    #
    # Retrieving events:
    # Associated model(s) must implement the find_events class method.
    # ActiveRecord models can use acts_as_activity_provider as a way to implement this class method.
    #
    # The following call should return all the scrum events visible by current user that occurred in the 5 last days:
    #   Meeting.find_events('scrums', User.current, 5.days.ago, Date.today)
    #   Meeting.find_events('scrums', User.current, 5.days.ago, Date.today, :project => foo) # events for project foo only
    #
    # Note that :view_scrums permission is required to view these events in the activity view.
    def activity_provider: (*untyped args) -> untyped

    # Registers a wiki formatter.
    #
    # Parameters:
    # * +name+ - formatter name
    # * +formatter+ - formatter class, which should have an instance method +to_html+
    # * +helper+ - helper module, which will be included by wiki pages (optional)
    # * +html_parser+ class reponsible for converting HTML to wiki text (optional)
    # * +options+ - a Hash of options (optional)
    #   * :label - label for the formatter displayed in application settings
    #
    # Examples:
    #   wiki_format_provider(:custom_formatter, CustomFormatter, :label => "My custom formatter")
    def wiki_format_provider: (untyped name, *untyped args) -> untyped

    # Register plugin models that use acts_as_attachable.
    #
    # Example:
    #   attachment_object_type SomeAttachableModel
    #
    # This is necessary for the core attachments controller routes and attachments/_form to work.
    def attachment_object_type: (*untyped args) -> untyped

    # Returns +true+ if the plugin can be configured.
    def configurable?: () -> untyped

    # The directory containing this plugin's migrations (<tt>plugin/db/migrate</tt>)
    def migration_directory: () -> untyped

    # Returns the version number of the latest migration for this plugin. Returns
    # nil if this plugin has no migrations.
    def latest_migration: () -> untyped

    # Returns the version numbers of all migrations for this plugin.
    def migrations: () -> untyped

    # Migrate this plugin to the given version
    def migrate: (?untyped version) -> untyped

    # Migrates all plugins or a single plugin to a given version
    # Exemples:
    #   Plugin.migrate
    #   Plugin.migrate('sample_plugin')
    #   Plugin.migrate('sample_plugin', 1)
    def self.migrate: (?untyped name, ?untyped version) -> untyped

    class MigrationContext < ActiveRecord::MigrationContext
      def up: (?untyped target_version) -> untyped

      def down: (?untyped target_version) -> untyped

      def run: (untyped direction, untyped target_version) -> untyped

      def open: () -> untyped

      def current_version: () -> untyped
    end

    class Migrator < ActiveRecord::Migrator
      # Runs the migrations from a plugin, up (or down) to the version given
      def self.migrate_plugin: (untyped plugin, untyped version) -> untyped

      def self.get_all_versions: (?untyped plugin) -> untyped

      def self.current_version: (?untyped plugin) -> untyped

      def load_migrated: () -> untyped

      def record_version_state_after_migrating: (untyped version) -> untyped
    end
  end
end
